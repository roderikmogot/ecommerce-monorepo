version: '3.8'

services:
  # PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: ecommerce-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d ecommerce" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app_net

  # Spring Boot Backend Service
  backend:
    build:
      context: ./
    container_name: ecommerce-backend
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://db:5432/ecommerce
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/ecommerce
      - SPRING_R2DBC_USERNAME=postgres
      - SPRING_R2DBC_PASSWORD=postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    restart: on-failure
    networks:
      - app_net

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - backend
    restart: always
    networks:
      - app_net

  # Grafana
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - app_net

  # Locust Master Node
  locust-master:
    build:
      context: .
      dockerfile: tests/Dockerfile.locust
    container_name: locust_master
    ports:
      - "8089:8089" # Web
      - "5557:5557" # Port for workers to connect
      - "5558:5558"
    volumes:
      - ./tests:/mnt/locust
    command: locust --master --host http://backend:8080 -f /mnt/locust/locustfile.py
    networks:
      - app_net

  locust-worker:
    build:
      context: .
      dockerfile: tests/Dockerfile.locust
    volumes:
      - ./tests:/mnt/locust
    command: locust --worker --master-host locust-master -f /mnt/locust/locustfile.py
    depends_on:
      - locust-master
      - backend
    networks:
      - app_net
    deploy:
      replicas: 4

networks:
  app_net:
    driver: bridge

volumes:
  postgres_data:
  grafana_data: